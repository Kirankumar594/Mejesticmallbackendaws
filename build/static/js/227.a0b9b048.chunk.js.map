{"version":3,"file":"static/js/227.a0b9b048.chunk.js","mappings":"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","sources":["components/admin/pages/AdminWalletManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  Modal,\r\n  Button,\r\n  message,\r\n  Typography,\r\n  Input,\r\n  Form,\r\n  Space,\r\n} from \"antd\";\r\nimport { PlusOutlined, MinusOutlined, EyeOutlined, SearchOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\nconst { Title } = Typography;\r\nconst API_BASE_URL = \"https://majesticmall.net/api/user\";\r\nconst { confirm } = Modal;\r\n\r\nconst AdminWalletManagement = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [isTransactionModalVisible, setIsTransactionModalVisible] =\r\n    useState(false);\r\n  const [isUpdateModalVisible, setIsUpdateModalVisible] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [form] = Form.useForm();\r\n\r\n  const encryptionKey = process.env.REACT_APP_ENCRYPTION_KEY;\r\n  const encryptedToken = Cookies.get(\"token\");\r\n  const token = encryptedToken\r\n    ? CryptoJS.AES.decrypt(encryptedToken, encryptionKey).toString(\r\n      CryptoJS.enc.Utf8\r\n    )\r\n    : null;\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      fetchUsers();\r\n      console.log(\"calling\");\r\n    }\r\n  }, [token]);\r\n  const [nochangedata, setNoChangeData] = useState([]);\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/all-wallets`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      setUsers(response.data.success);\r\n      setNoChangeData(response.data.success);\r\n    } catch (error) {\r\n      message.error(\"Failed to fetch users\");\r\n    }\r\n  };\r\n\r\n  console.log(\"users=====\", users);\r\n\r\n  const handleWalletUpdate = async (values) => {\r\n    try {\r\n      await axios.post(\r\n        `${API_BASE_URL}/updatewallet`,\r\n        { userId: selectedUser._id, amount: values.amount, type: values.type },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      message.success(\"Wallet updated successfully\");\r\n      setIsUpdateModalVisible(false);\r\n      form.resetFields();\r\n      fetchUsers();\r\n    } catch (error) {\r\n      message.error(\"Failed to update wallet\");\r\n    }\r\n  };\r\n\r\n  // const showUpdateModal = (user, type) => {\r\n  //   setSelectedUser(user);\r\n  //   form.setFieldsValue({ type });\r\n  //   setIsUpdateModalVisible(true);\r\n  // };\r\n\r\n  const applyFilters = (searchText) => {\r\n    if (!nochangedata || nochangedata.length === 0) return;\r\n\r\n    let filteredData = nochangedata.filter((customer) =>\r\n      customer?.userId?.name && // Ensure userId and name exist\r\n      typeof customer.userId.name === \"string\" &&\r\n      customer.userId.name.toLowerCase().includes(searchText.toLowerCase())\r\n    );\r\n\r\n    // If no results are found, reset to `nochangedata`\r\n    setUsers(filteredData.length > 0 ? filteredData : nochangedata);\r\n  };\r\n\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      dataIndex: \"userId\",\r\n      key: \"userId.name\",\r\n      render: (userId) => userId?.name || \"N/A\",\r\n    },\r\n    {\r\n      title: \"Mobile\",\r\n      dataIndex: \"userId\",\r\n      key: \"userId.mobile\",\r\n      render: (userId) => userId?.mobile || \"N/A\",\r\n    },\r\n    {\r\n      title: \"Wallet Balance\",\r\n      dataIndex: \"balance\",\r\n      render: (_, record) => (\r\n        <span style={{ color: record.balance > 0 ? \"green\" : \"red\" }}>\r\n          {record?.balance?.toFixed(2)}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Actions\",\r\n      key: \"actions\",\r\n      render: (_, record) => (\r\n        <>\r\n          <Button\r\n            icon={<EyeOutlined />}\r\n            onClick={() => {\r\n              setTransactions(record?.transactions?.reverse());\r\n              setIsTransactionModalVisible(true);\r\n            }}\r\n            style={{ marginRight: 8 }}\r\n          >\r\n            View Transactions\r\n          </Button>\r\n          {/* <Button type=\"primary\" icon={<PlusOutlined />} onClick={() => showUpdateModal(record, 'credit')}>\r\n            Add Bonus\r\n          </Button>\r\n          <Button type=\"danger\" icon={<MinusOutlined />} onClick={() => showUpdateModal(record, 'debit')} style={{ marginLeft: 8 }}>\r\n            Deduct Amount\r\n          </Button> */}\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <Title level={3}>Wallet Management</Title>\r\n      <Space>\r\n        <Input\r\n          placeholder=\"Search customers\"\r\n          prefix={<SearchOutlined />}\r\n          // value={searchText}\r\n          onChange={(e) => applyFilters(e.target.value)}\r\n          style={{ width: 200 }}\r\n        />\r\n      </Space>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={users}\r\n        rowKey=\"_id\"\r\n        pagination={{ pageSize: 10 }}\r\n      />\r\n\r\n      {/* Transactions Modal */}\r\n      <Modal\r\n        title=\"User Transactions\"\r\n        visible={isTransactionModalVisible}\r\n        onCancel={() => setIsTransactionModalVisible(false)}\r\n        footer={null}\r\n        width={800}\r\n      >\r\n        <Table\r\n          columns={[\r\n            {\r\n              title: \"Date\",\r\n              dataIndex: \"date\",\r\n              key: \"date\",\r\n              render: (date) => new Date(date).toLocaleDateString(), // Format date\r\n            },\r\n            {\r\n              title: \"Amount\",\r\n              dataIndex: \"amount\",\r\n              key: \"amount\",\r\n              render: (_, record) => {\r\n                const amount = record.credit > 0 ? record.credit : record.debit;\r\n                const isCredit = record.credit > 0;\r\n                return (\r\n                  <span\r\n                    style={{\r\n                      color: isCredit ? \"green\" : \"red\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    {isCredit\r\n                      ? `+${amount.toFixed(2)}`\r\n                      : `-${amount.toFixed(2)}`}\r\n                  </span>\r\n                );\r\n              },\r\n            },\r\n            {\r\n              title: \"Type\",\r\n              dataIndex: \"type\",\r\n              key: \"type\",\r\n              render: (_, record) => (\r\n                <span style={{ color: record.credit > 0 ? \"green\" : \"red\" }}>\r\n                  {record.credit > 0 ? \"Credit\" : \"Debit\"}\r\n                </span>\r\n              ),\r\n            },\r\n            {\r\n              title: \"Detail\",\r\n              dataIndex: \"detail\",\r\n              key: \"detail\",\r\n            },\r\n          ]}\r\n          dataSource={transactions}\r\n          rowKey=\"_id\"\r\n        />\r\n      </Modal>\r\n\r\n      {/* Update Wallet Modal */}\r\n      <Modal\r\n        title={`Update Wallet - ${selectedUser?.name}`}\r\n        visible={isUpdateModalVisible}\r\n        onCancel={() => setIsUpdateModalVisible(false)}\r\n        footer={null}\r\n      >\r\n        <Form form={form} onFinish={handleWalletUpdate} layout=\"vertical\">\r\n          <Form.Item\r\n            name=\"amount\"\r\n            label=\"Amount\"\r\n            rules={[{ required: true, message: \"Please enter an amount\" }]}\r\n          >\r\n            <Input type=\"number\" />\r\n          </Form.Item>\r\n          <Form.Item name=\"type\" hidden>\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Update Wallet\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminWalletManagement;\r\n"],"names":["Title","Typography","API_BASE_URL","confirm","Modal","AdminWalletManagement","users","setUsers","useState","isTransactionModalVisible","setIsTransactionModalVisible","isUpdateModalVisible","setIsUpdateModalVisible","selectedUser","setSelectedUser","transactions","setTransactions","form","Form","useForm","encryptedToken","Cookies","get","token","CryptoJS","decrypt","process","toString","Utf8","useEffect","fetchUsers","console","log","nochangedata","setNoChangeData","async","response","axios","headers","Authorization","data","success","error","message","columns","title","dataIndex","key","render","userId","name","mobile","_","record","_record$balance","_jsx","style","color","balance","children","toFixed","_Fragment","Button","icon","EyeOutlined","onClick","_record$transactions","reverse","marginRight","_jsxs","level","Space","Input","placeholder","prefix","SearchOutlined","onChange","e","searchText","length","filteredData","filter","customer","_customer$userId","toLowerCase","includes","applyFilters","target","value","width","Table","dataSource","rowKey","pagination","pageSize","visible","onCancel","footer","date","Date","toLocaleDateString","amount","credit","debit","isCredit","fontWeight","onFinish","post","_id","values","type","resetFields","layout","Item","label","rules","required","hidden","htmlType"],"sourceRoot":""}