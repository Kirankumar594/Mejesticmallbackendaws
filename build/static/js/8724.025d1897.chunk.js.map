{"version":3,"file":"static/js/8724.025d1897.chunk.js","mappings":"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","sources":["components/admin/components/CustomInput.js","components/admin/features/brand/brandService.js","components/admin/features/brand/brandSlice.js","components/admin/pages/Addbrand.js","components/admin/utils/axiosconfig.js","components/admin/utils/baseUrl.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst CustomInput = (props) => {\r\n  const { type, label, i_id, i_class, name, val, onChng, onBlr ,style} = props;\r\n  return (\r\n    \r\n    <div className=\"form-floating mt-3\">\r\n        <label htmlFor={label}>{label}</label>\r\n      <input\r\n        type={type}\r\n        className={`form-control ${i_class}`}\r\n        id={i_id}\r\n        placeholder={label}\r\n        value={val}\r\n        onChange={onChng}\r\n        style={style}\r\n        onBlur={onBlr}\r\n      />\r\n    \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomInput;\r\n","import axios from \"axios\";\r\nimport { config } from \"../../utils/axiosconfig\";\r\nimport { base_url } from \"../../utils/baseUrl\";\r\nconst getBrands = async () => {\r\n  const response = await axios.get(`${base_url}brand/`);\r\n\r\n  return response.data;\r\n};\r\n\r\nconst createBrand = async (brand) => {\r\n  const response = await axios.post(`${base_url}brand/`, brand, config);\r\n\r\n  return response.data;\r\n};\r\nconst updateBrand = async (brand) => {\r\n  const response = await axios.put(\r\n    `${base_url}brand/${brand.id}`,\r\n    { title: brand.brandData.title },\r\n    config\r\n  );\r\n\r\n  return response.data;\r\n};\r\nconst getBrand = async (id) => {\r\n  const response = await axios.get(`${base_url}brand/${id}`, config);\r\n\r\n  return response.data;\r\n};\r\n\r\nconst deleteBrand = async (id) => {\r\n  const response = await axios.delete(`${base_url}brand/${id}`, config);\r\n\r\n  return response.data;\r\n};\r\n\r\nconst brandService = {\r\n  getBrands,\r\n  createBrand,\r\n  getBrand,\r\n  updateBrand,\r\n  deleteBrand,\r\n};\r\n\r\nexport default brandService;\r\n","import { createSlice, createAsyncThunk, createAction } from \"@reduxjs/toolkit\";\r\nimport brandService from \"./brandService\";\r\n\r\nexport const getBrands = createAsyncThunk(\r\n  \"brand/get-brands\",\r\n  async (thunkAPI) => {\r\n    try {\r\n      return await brandService.getBrands();\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\nexport const getABrand = createAsyncThunk(\r\n  \"brand/get-brand\",\r\n  async (id, thunkAPI) => {\r\n    try {\r\n      return await brandService.getBrand(id);\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\nexport const createBrand = createAsyncThunk(\r\n  \"brand/create-brand\",\r\n  async (brandData, thunkAPI) => {\r\n    try {\r\n      return await brandService.createBrand(brandData);\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\nexport const updateABrand = createAsyncThunk(\r\n  \"brand/update-brand\",\r\n  async (brand, thunkAPI) => {\r\n    try {\r\n      return await brandService.updateBrand(brand);\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteABrand = createAsyncThunk(\r\n  \"brand/delete-brand\",\r\n  async (id, thunkAPI) => {\r\n    try {\r\n      return await brandService.deleteBrand(id);\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const resetState = createAction(\"Reset_all\");\r\n\r\nconst initialState = {\r\n  brands: [],\r\n  isError: false,\r\n  isLoading: false,\r\n  isSuccess: false,\r\n  message: \"\",\r\n};\r\nexport const brandSlice = createSlice({\r\n  name: \"brands\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getBrands.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getBrands.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = false;\r\n        state.isSuccess = true;\r\n        state.brands = action.payload;\r\n      })\r\n      .addCase(getBrands.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.isSuccess = false;\r\n        state.message = action.error;\r\n      })\r\n      .addCase(createBrand.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(createBrand.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = false;\r\n        state.isSuccess = true;\r\n        state.createdBrand = action.payload;\r\n      })\r\n      .addCase(createBrand.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.isSuccess = false;\r\n        state.message = action.error;\r\n      })\r\n      .addCase(getABrand.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getABrand.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = false;\r\n        state.isSuccess = true;\r\n        state.brandName = action.payload.title;\r\n      })\r\n      .addCase(getABrand.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.isSuccess = false;\r\n        state.message = action.error;\r\n      })\r\n      .addCase(updateABrand.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(updateABrand.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = false;\r\n        state.isSuccess = true;\r\n        state.updatedBrand = action.payload;\r\n      })\r\n      .addCase(updateABrand.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.isSuccess = false;\r\n        state.message = action.error;\r\n      })\r\n      .addCase(deleteABrand.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(deleteABrand.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = false;\r\n        state.isSuccess = true;\r\n        state.deletedBrand = action.payload;\r\n      })\r\n      .addCase(deleteABrand.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.isSuccess = false;\r\n        state.message = action.error;\r\n      })\r\n      .addCase(resetState, () => initialState);\r\n  },\r\n});\r\n\r\nexport default brandSlice.reducer;\r\n","import { React, useEffect } from \"react\";\r\nimport CustomInput from \"../components/CustomInput\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport {\r\n  createBrand,\r\n  getABrand,\r\n  resetState,\r\n  updateABrand,\r\n} from \"../features/brand/brandSlice\";\r\n\r\n\r\nconst Addbrand = () => {\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  // const getBrandId = location.pathname.split(\"/\")[3];\r\n  // const newBrand = useSelector((state) => state.brand);\r\n  // const {\r\n  //   isSuccess,\r\n  //   isError,\r\n  //   isLoading,\r\n  //   createdBrand,\r\n  //   brandName,\r\n  //   updatedBrand,\r\n  // } = newBrand;\r\n  // useEffect(() => {\r\n  //   if (getBrandId !== undefined) {\r\n  //     dispatch(getABrand(getBrandId));\r\n  //   } else {\r\n  //     dispatch(resetState());\r\n  //   }\r\n  // }, [getBrandId]);\r\n\r\n  // useEffect(() => {\r\n  //   if (isSuccess && createdBrand) {\r\n  //     toast.success(\"Brand Added Successfullly!\");\r\n  //   }\r\n  //   if (isSuccess && updatedBrand) {\r\n  //     toast.success(\"Brand Updated Successfullly!\");\r\n  //     navigate(\"/admin/list-brand\");\r\n  //   }\r\n\r\n  //   if (isError) {\r\n  //     toast.error(\"Something Went Wrong!\");\r\n  //   }\r\n  // }, [isSuccess, isError, isLoading]);\r\n  // const formik = useFormik({\r\n  //   enableReinitialize: true,\r\n  //   initialValues: {\r\n  //     title: brandName || \"\",\r\n  //   },\r\n  //   validationSchema: schema,\r\n  //   onSubmit: (values) => {\r\n  //     if (getBrandId !== undefined) {\r\n  //       const data = { id: getBrandId, brandData: values };\r\n  //       dispatch(updateABrand(data));\r\n  //       dispatch(resetState());\r\n  //     } else {\r\n  //       dispatch(createBrand(values));\r\n  //       formik.resetForm();\r\n  //       setTimeout(() => {\r\n  //         dispatch(resetState());\r\n  //       }, 300);\r\n  //     }\r\n  //   },\r\n  // });\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"mb-4 title\">\r\n        Add Type\r\n      </h3>\r\n      <div>\r\n        <form action=\"\" >\r\n          <CustomInput\r\n            type=\"text\"\r\n            name=\"title\"\r\n            // onChng={formik.handleChange(\"title\")}\r\n            // onBlr={formik.handleBlur(\"title\")}\r\n            // val={formik.values.title}\r\n            label=\"Enter Type\"\r\n            id=\"Type\"\r\n          />\r\n          {/* <div className=\"error\">\r\n            {formik.touched.title && formik.errors.title}\r\n          </div> */}\r\n          <button\r\n            className=\"btn btn-success border-0 rounded-3 my-5\"\r\n            type=\"submit\"\r\n          >\r\n            {/* {getBrandId !== undefined ? \"Edit\" : \"Add\"} Brand */}\r\n            Add Type\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Addbrand;\r\n","import Cookies from \"js-cookie\";\r\nimport CryptoJS from \"crypto-js\";\r\nconst encryptionKey = process.env.REACT_APP_ENCRYPTION_KEY;\r\nconst encryptedUser = Cookies.get(\"user\");\r\n\r\nconst getTokenFromLocalStorage = encryptedUser\r\n  ? JSON.parse(\r\n      CryptoJS.AES.decrypt(encryptedUser, encryptionKey).toString(\r\n        CryptoJS.enc.Utf8\r\n      )\r\n    )\r\n  : null;\r\n\r\nexport const config = {\r\n  headers: {\r\n    Authorization: `Bearer ${\r\n      getTokenFromLocalStorage !== null ? getTokenFromLocalStorage.token : \"\"\r\n    }`,\r\n    Accept: \"application/json\",\r\n  },\r\n};\r\n","export const base_url = \"http://localhost:3000/api/\";\r\n"],"names":["props","type","label","i_id","i_class","name","val","onChng","onBlr","style","_jsxs","className","children","_jsx","htmlFor","id","placeholder","value","onChange","onBlur","getBrands","async","axios","get","base_url","data","createBrand","post","brand","config","getBrand","updateBrand","put","title","brandData","deleteBrand","delete","createAsyncThunk","brandService","error","thunkAPI","rejectWithValue","getABrand","updateABrand","deleteABrand","resetState","createAction","initialState","brands","isError","isLoading","isSuccess","message","createSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","createdBrand","brandName","updatedBrand","deletedBrand","Addbrand","useDispatch","useLocation","useNavigate","CustomInput","encryptedUser","Cookies","getTokenFromLocalStorage","JSON","parse","CryptoJS","decrypt","process","toString","Utf8","headers","Authorization","token","Accept"],"sourceRoot":""}